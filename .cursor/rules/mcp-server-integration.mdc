---
description: 
globs: 
alwaysApply: false
---
# Model Context Protocol (MCP) Server Integration

## ü§ñ MCP Server Overview

The Sample Design System includes a **comprehensive Model Context Protocol (MCP) server** that provides LLMs with full access to design system information, code validation, and implementation guidance. This is a production-ready implementation that fully complies with the [MCP 2025-06-18 specification](mdc:https:/modelcontextprotocol.io/specification/2025-06-18).

### üåê Server Endpoints
- **HTTP Transport**: `/api/mcp/http`
- **SSE Transport**: `/api/mcp/sse` (Server-Sent Events)
- **Protocol Version**: `2025-06-18` (Latest MCP specification)
- **JSON-RPC**: `2.0` compliant with comprehensive error handling
- **Location**: `docs/pages/api/mcp/[transport].js`

## üìä Full MCP Server Capabilities

### Complete MCP Specification Support

Our MCP server implements **ALL** MCP capabilities as defined in the specification:

#### ‚úÖ **Tools** - Interactive design system assistance (5 tools)
- Component discovery and information
- Implementation guides and validation
- Advanced search with filtering
- Code validation and improvement suggestions

#### ‚úÖ **Resources** - Structured documentation access (3 resources)  
- Complete component documentation
- System architecture specifications
- Browser compatibility matrix

#### ‚úÖ **Prompts** - Pre-built guidance templates (3 prompts)
- Component integration workflows
- Troubleshooting assistance 
- Design review processes

#### ‚úÖ **Completion** - Intelligent auto-completion
- Component names and properties
- Framework types and patterns
- Resource URIs and prompt arguments

#### ‚úÖ **Logging** - Configurable logging system
- 8 log levels (debug through emergency)
- Real-time log level adjustment
- Structured logging output

### Enhanced Server Capabilities Object
```javascript
const serverCapabilities = {
  tools: {
    listChanged: false
  },
  resources: {
    subscribe: false,
    listChanged: false
  },
  prompts: {
    listChanged: false
  },
  completions: {},
  logging: {}
};
```

## üõ†Ô∏è Enhanced Tools System

### 1. `list_components` (Enhanced)
Lists all available design system components with comprehensive metadata.

**Input Schema:**
```json
{
  "type": "object",
  "properties": {},
  "additionalProperties": false
}
```

**Enhanced Output:** Component inventory with categories, complexity ratings, and detailed feature lists.

### 2. `get_component_info` (Enhanced)
Get detailed component information with strict validation.

**Enhanced Input Schema:**
```json
{
  "type": "object", 
  "properties": {
    "component": {
      "type": "string",
      "description": "Component name",
      "enum": ["button", "card", "modal", "alert", "breadcrumb", "accordion"],
      "pattern": "^[a-z][a-z0-9-]*$"
    }
  },
  "required": ["component"],
  "additionalProperties": false
}
```

### 3. `get_implementation_guide` (Enhanced)
Framework-specific implementation guides with advanced patterns.

**Enhanced Input Schema:**
```json
{
  "type": "object",
  "properties": {
    "framework": {
      "type": "string", 
      "enum": ["vanilla", "react", "vue", "angular", "svelte"],
      "default": "vanilla"
    },
    "includeAdvanced": {
      "type": "boolean",
      "description": "Include advanced integration patterns",
      "default": false
    }
  },
  "required": ["framework"],
  "additionalProperties": false
}
```

### 4. `search_components` (Enhanced)
Advanced component search with category and complexity filtering.

**Enhanced Input Schema:**
```json
{
  "type": "object",
  "properties": {
    "query": {
      "type": "string",
      "minLength": 1,
      "maxLength": 100
    },
    "category": {
      "type": "string",
      "enum": ["form", "navigation", "feedback", "layout", "data-display", "overlay"]
    },
    "complexity": {
      "type": "string", 
      "enum": ["simple", "moderate", "complex"]
    },
    "limit": {
      "type": "integer",
      "minimum": 1,
      "maximum": 50,
      "default": 10
    }
  },
  "required": ["query"],
  "additionalProperties": false
}
```

**Enhanced Features:**
- Category-based filtering (form, navigation, feedback, layout, data-display, overlay)
- Complexity-based filtering (simple, moderate, complex)
- Relevance scoring and ranking
- Configurable result limits

### 5. `validate_component_usage` üÜï
**NEW TOOL** - Comprehensive code validation and improvement suggestions.

**Input Schema:**
```json
{
  "type": "object",
  "properties": {
    "code": {
      "type": "string",
      "description": "Component implementation code to validate",
      "minLength": 1,
      "maxLength": 10000
    },
    "component": {
      "type": "string",
      "description": "Specific component to validate (optional)",
      "enum": ["button", "card", "modal", "alert", "breadcrumb", "accordion"]
    },
    "framework": {
      "type": "string",
      "enum": ["vanilla", "react", "vue", "angular", "svelte"],
      "default": "vanilla"
    },
    "strict": {
      "type": "boolean",
      "description": "Enable strict validation mode",
      "default": false
    }
  },
  "required": ["code"],
  "additionalProperties": false
}
```

**Comprehensive Validation Output:**
```json
{
  "is_valid": true,
  "component_detected": "button",
  "errors": [],
  "warnings": ["Button should have visible text content"],
  "suggestions": ["Use addEventListener for better event handling"],
  "accessibility_issues": [],
  "performance_tips": ["Consider using async/defer for script loading"],
  "score": 85
}
```

**Validation Features:**
- **Auto Component Detection** - Automatically identifies components in code
- **Framework-Specific Validation** - Tailored rules for each framework
- **Accessibility Checking** - WCAG compliance validation
- **Performance Analysis** - Performance optimization suggestions
- **Scoring System** - Numerical code quality score (0-100)
- **Strict Mode** - Enhanced validation for production code

## üìö Resources System üÜï

Access structured documentation via the resources API:

### Available Resources

#### 1. **design-system://components/all**
Complete component documentation with API details, usage examples, and implementation guides.

#### 2. **design-system://architecture** 
Technical architecture specifications, build system details, and browser compatibility.

#### 3. **design-system://browser-support**
Comprehensive browser compatibility matrix with feature support details.

### Resource Usage
```javascript
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "resources/read",
  "params": {
    "uri": "design-system://components/all"
  }
}
```

## üí¨ Prompts System üÜï

Pre-built prompt templates for common development tasks:

### Available Prompts

#### 1. **component_integration**
Step-by-step component integration instructions.

**Arguments:**
- `component` (required): Component name
- `framework` (optional): Target framework (defaults to vanilla)

#### 2. **troubleshoot_component** 
Comprehensive troubleshooting assistance for component issues.

**Arguments:**
- `component` (required): Component experiencing issues
- `issue` (required): Detailed problem description

#### 3. **design_review**
Design system best practices review for code submissions.

**Arguments:**
- `code` (required): Code to review for compliance

### Prompt Usage Example
```javascript
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "prompts/get",
  "params": {
    "name": "component_integration",
    "arguments": {
      "component": "button",
      "framework": "react"
    }
  }
}
```

## üîÑ Completion Support üÜï

Intelligent auto-completion for enhanced developer experience:

### Completion Categories
- **Component Names** - Auto-complete available components
- **Framework Types** - Suggest supported frameworks
- **Resource URIs** - Complete resource paths
- **Prompt Arguments** - Suggest valid argument values

### Completion Request Example
```javascript
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "completion/complete",
  "params": {
    "ref": {
      "type": "ref/prompt",
      "name": "component_integration"
    },
    "argument": {
      "name": "component",
      "value": "bu"  // Returns: ["button"]
    }
  }
}
```

## üìù Logging System üÜï

Comprehensive configurable logging system:

### Available Log Levels
- `debug` - Detailed debugging information
- `info` - General information (default)
- `notice` - Normal but significant conditions
- `warning` - Warning conditions
- `error` - Error conditions
- `critical` - Critical conditions requiring attention
- `alert` - Action must be taken immediately
- `emergency` - System is unusable

### Dynamic Log Level Configuration
```javascript
{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "logging/setLevel",
  "params": {
    "level": "debug"
  }
}
```

## üîß Component Data Structure (Enhanced)

### Enhanced Component Entry Requirements
When adding components, MUST update the `COMPONENTS` object with comprehensive metadata:

```javascript
const COMPONENTS = {
  '[component-name]': {
    name: '[Component Display Name]',
    description: '[Clear, LLM-friendly description of component purpose]',
    usage: `<sample-[name] variant="primary">[Typical Content]</sample-[name]>`,
    props: {
      'variant': 'String - "primary" | "secondary" | "outline" - Visual style variant',
      'size': 'String - "small" | "medium" | "large" - Component size',
      'disabled': 'Boolean - Disables component interaction',
      'onClick': 'Function - Click event handler'
    },
    features: [
      'Multiple visual variants',
      'Accessibility support', 
      'Keyboard navigation',
      'Custom theming via CSS properties',
      'Responsive design'
    ],
    examples: [
      'Form submission actions',
      'Call-to-action elements',
      'User interface controls',
      'Interactive navigation'
    ]
  }
};
```

### Component Categorization System üÜï
Components are automatically categorized for enhanced search:

```javascript
const componentCategories = {
  'button': 'form',
  'card': 'data-display', 
  'modal': 'overlay',
  'alert': 'feedback',
  'breadcrumb': 'navigation',
  'accordion': 'data-display'
};

const componentComplexity = {
  'button': 'simple',
  'card': 'simple',
  'alert': 'simple', 
  'breadcrumb': 'moderate',
  'accordion': 'moderate',
  'modal': 'complex'
};
```

## üß™ Enhanced Testing Requirements

### Comprehensive MCP Server Testing
Test all new capabilities with the enhanced test script:

```bash
# Test complete MCP server functionality
node docs/scripts/test-mcp-proper.mjs http://localhost:3000

# Test deployed version
node docs/scripts/test-mcp-proper.mjs https://your-domain.com
```

### Extended Test Coverage
All tests MUST pass before shipping:
- ‚úÖ **MCP Connection Lifecycle** - Initialize ‚Üí Initialized ‚Üí Ready
- ‚úÖ **Tools Discovery** - All 5 tools listed and properly described
- ‚úÖ **Tool Execution** - Each tool works with valid parameters and schemas
- ‚úÖ **Resources Access** - All 3 resources accessible and properly formatted
- ‚úÖ **Prompts Functionality** - All 3 prompts work with argument validation
- ‚úÖ **Completion Support** - Auto-completion works for all categories
- ‚úÖ **Logging System** - Log level changes and message formatting
- ‚úÖ **Code Validation** - validate_component_usage tool comprehensive testing
- ‚úÖ **Error Handling** - Proper JSON-RPC 2.0 error responses
- ‚úÖ **Schema Validation** - Input validation for all endpoints

## üìã Enhanced Development Workflow

### When Adding New Components
1. **Update Component Data** - Add to `COMPONENTS` object with full metadata
2. **Set Category & Complexity** - Add to categorization mappings
3. **Update Validation Rules** - Add component-specific validation logic
4. **Test All MCP Capabilities** - Verify tools, resources, prompts work
5. **Update Resource Documentation** - Ensure resources reflect new component
6. **Test Search Functionality** - Verify component is discoverable
7. **Validate MCP Compliance** - Run comprehensive test suite

### When Modifying Existing Components
1. **Update Properties & Usage** - Reflect API changes in MCP data
2. **Update Validation Logic** - Modify component-specific validation rules
3. **Update Resource Data** - Keep structured documentation current
4. **Test Code Validation** - Ensure validate_component_usage works correctly
5. **Update Prompts** - Modify templates if component behavior changed
6. **Test Backwards Compatibility** - Ensure existing LLM integrations work
7. **Update Completion Data** - Refresh auto-completion suggestions

## üéØ Enhanced LLM Integration Benefits

### For AI Assistants
The enhanced MCP server enables LLMs to:
- **Discover Components** - Advanced search with category and complexity filtering
- **Generate Accurate Code** - Up-to-date usage examples and validation
- **Validate Implementations** - Real-time code analysis and improvement suggestions
- **Provide Framework Guidance** - Specific integration help for all supported frameworks
- **Troubleshoot Issues** - Structured troubleshooting workflows via prompts
- **Review Code Quality** - Automated design system compliance checking
- **Access Structured Data** - Rich documentation via resources API
- **Auto-Complete Suggestions** - Intelligent completion for faster development

### For Developers
- **Interactive Documentation** - Query components programmatically with advanced filtering
- **Code Quality Assurance** - Automated validation and scoring system
- **Framework Integration** - Step-by-step guidance for all supported frameworks
- **Performance Optimization** - Automated performance analysis and suggestions
- **Accessibility Compliance** - Built-in accessibility validation
- **Real-Time Assistance** - Live completion and validation during development

## üö® Critical Requirements (Updated)

### Enhanced Data Quality Standards
- **Accuracy** - All component information must be current, complete, and validated
- **Completeness** - Include all properties, events, capabilities, and metadata
- **Categorization** - Proper category and complexity assignments
- **Validation Rules** - Component-specific validation logic implementation
- **Schema Compliance** - All inputs/outputs must conform to JSON schemas

### Full MCP Protocol Compliance
- **MCP 2025-06-18** - Complete compliance with latest specification
- **JSON-RPC 2.0** - Proper message format and comprehensive error handling
- **All Capabilities** - Tools, Resources, Prompts, Completion, and Logging support
- **Schema Validation** - Complete input/output schema definitions
- **Lifecycle Management** - Proper initialization and state handling

### Production-Ready Performance
- **Fast Response Times** - Optimized tool execution under 200ms
- **Efficient Data Handling** - Minimal memory footprint and optimal payloads
- **Robust Error Recovery** - Graceful handling of all failure scenarios
- **Comprehensive Logging** - Detailed logging for debugging and monitoring
- **Scalable Architecture** - Support for concurrent connections and high load

**Remember**: This MCP server is now a production-ready, full-featured implementation that serves as a comprehensive interface between AI assistants and the design system. It must be maintained with the highest standards of reliability, accuracy, and performance!

