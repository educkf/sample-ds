---
description: 
globs: 
alwaysApply: true
---
---
description: Core architecture principles for Lit Framework Design System with dual-usage patterns
globs: []
alwaysApply: true
---

# Lit Framework Design System - Core Architecture

## üéØ Project Mission
This is a **Lit Framework Design System** that supports **DUAL USAGE PATTERNS** with comprehensive documentation:

1. **üì¶ NPM Package for Bundlers** - ES modules (~15KB) with externalized Lit for Vite/Webpack/etc
2. **üéØ Standalone Script Tags** - Self-contained UMD bundles (~21KB) for direct HTML usage
3. **üìö Next.js Documentation Site** - Interactive documentation with live playgrounds and MCP server

## üèóÔ∏è Build System Architecture

### Three Build Outputs:
- `dist/index.es.js` - ES modules for bundlers (Lit externalized)
- `dist/standalone/index.js` - Complete UMD library (Lit bundled) 
- `dist/components/*.js` - Individual UMD components (self-contained)
- `dist/*.d.ts` - TypeScript definitions

### Documentation Architecture:
- **Next.js Application** (`docs/`) - Interactive documentation site
- **Markdoc Integration** - Custom tags for component playgrounds
- **MCP Server** - Model Context Protocol server for LLM integration
- **Live Playgrounds** - Interactive component examples with real-time events

### Usage Patterns to Support:

#### Bundled Projects:
```javascript
import 'sample-design-system-educkf/components/sample-button';
import { SampleButton } from 'sample-design-system';
```

#### Script Tags:
```html
<sample-button variant="primary">Click me!</sample-button>
<script src="dist/components/sample-button.js"></script>
```

## ü§ñ Enhanced MCP Server Integration

The documentation site includes a **production-ready Model Context Protocol (MCP) server** with full MCP 2025-06-18 specification compliance at `/api/mcp/http` and `/api/mcp/sse` that provides:

### Complete MCP Capabilities
- **Tools (5)** - Interactive design system assistance including code validation
- **Resources (3)** - Structured documentation access 
- **Prompts (3)** - Pre-built guidance templates for common tasks
- **Completion** - Intelligent auto-completion for enhanced developer experience
- **Logging** - Configurable logging system with 8 log levels

### Advanced Features
- **Code Validation** - Real-time component implementation analysis with scoring
- **Enhanced Search** - Category and complexity-based component filtering
- **Framework Guidance** - Specific integration help for all supported frameworks
- **Accessibility Validation** - Built-in WCAG compliance checking
- **Performance Analysis** - Automated performance optimization suggestions
- **Auto-Completion** - Intelligent suggestions for components, frameworks, and resources

## üö® Never Break These Principles:

1. **Dual build system** - Both ES modules AND UMD must be maintained
2. **CSS custom properties** - All styling via `--sample-[component]-[property]` pattern
3. **Self-contained components** - Standalone versions include all dependencies
4. **TypeScript support** - Type definitions must be generated
5. **Framework agnostic** - Components work in any framework or vanilla HTML
6. **Interactive documentation** - All components must have live playgrounds
7. **MCP server compatibility** - Component data must be accessible via MCP API

## üìÅ Component Structure:
```
src/components/[name]/
‚îú‚îÄ‚îÄ index.ts           # Export and registration
‚îî‚îÄ‚îÄ [name].ts         # Component implementation

docs/pages/components/
‚îî‚îÄ‚îÄ [name].md         # Next.js Markdoc documentation
```

## üé® Naming Conventions:
- Web component tags: `sample-[name]`
- Class names: `Sample[Name]`
- CSS custom properties: `--sample-[component]-[property]`
- Documentation files: `docs/pages/components/[name].md`

**When working on this project, ALWAYS consider both usage patterns, documentation requirements, and MCP server integration.**

## üîÑ Development Workflow

1. **Component Creation** - Follow dual-usage patterns
2. **Next.js Documentation** - MANDATORY: Create interactive Markdoc docs
3. **MCP Server Update** - Update component data for LLM integration
4. **Demo Creation** - Standalone and development demos
5. **Build Testing** - Verify both ES modules and UMD outputs
6. **Quality Assurance** - Test in real frameworks and documentation site

## üìö Documentation Requirements

Every component change MUST include:
- **Next.js Markdoc Documentation** in `docs/pages/components/[name].md`
- **Interactive Playgrounds** with live component examples using `{% playground %}` tag
- **API Documentation Tables** using `{% apiTable %}` tag
- **Standalone Demo** in `demo/[name].html`
- **Development Integration** in `dev/index.html`
- **Navigation Updates** in `docs/components/ComponentsSidebar.js`
- **MCP Server Data** - Update component information for LLM access

## üöÄ Documentation System Features

- **Live Component Playgrounds** - Real-time component interaction
- **Event Console Logging** - See component events in real-time
- **Code Copy Functionality** - One-click code copying
- **Responsive Design** - Mobile-first documentation
- **Framework Examples** - React, Vue, Angular, Svelte integration
- **MCP Server Integration** - LLM-accessible component information
- **Interactive API Tables** - Properties, events, CSS variables, parts
- **Tabbed Content** - Installation and usage examples
- **Custom Callouts** - Important notes and tips

## üéØ Enhanced Quality Gates

Before shipping any component:
- [ ] **Dual usage patterns** work (bundled + standalone)
- [ ] **Next.js documentation** complete with interactive playgrounds
- [ ] **MCP server integration** complete with all capabilities:
  - [ ] Component data added to tools
  - [ ] Resources updated with component info
  - [ ] Prompts work for component integration/troubleshooting
  - [ ] Code validation rules implemented
  - [ ] Component categorization assigned
  - [ ] Auto-completion data updated
- [ ] **All demos** functional (standalone + development)
- [ ] **API documentation** complete with interactive examples
- [ ] **Navigation** updated in sidebar and component index
- [ ] **Build system** generates all required outputs
- [ ] **TypeScript definitions** generated and valid
- [ ] **MCP server testing** passes all validation:
  - [ ] All 5 tools work correctly
  - [ ] All 3 resources accessible
  - [ ] All 3 prompts functional
  - [ ] Completion and logging work
  - [ ] Code validation provides accurate results




