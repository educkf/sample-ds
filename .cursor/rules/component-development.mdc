---
description: 
globs: 
alwaysApply: true
---
---
description: Component development guidelines and patterns for the Design System
globs: 
  - "src/components/**/*.ts"
  - "src/components/**/*.js"
alwaysApply: false
---

# Component Development Guidelines

## üß© Component Creation Process

### 1. File Structure
Create components in `src/components/sample-[name]/` with:
- `index.ts` - Export and registration
- `sample-[name].ts` - Component implementation

### 2. Component Template
Use the `ds-component` snippet or follow this pattern:

@component-template.md

```typescript
import { LitElement, html, css } from 'lit';
import { customElement, property } from 'lit/decorators.js';

@customElement('sample-[name]')
export class Sample[Name] extends LitElement {
  static styles = css`
    :host {
      display: inline-block;
      --sample-[name]-bg: var(--sample-primary-color, #007bff);
      --sample-[name]-color: var(--sample-text-color, white);
    }
  `;

  @property()
  variant: 'primary' | 'secondary' = 'primary';

  render() {
    return html`<div part="[name]"><slot></slot></div>`;
  }
}

declare global {
  interface HTMLElementTagNameMap {
    'sample-[name]': Sample[Name];
  }
}
```

### 3. CSS Theming Strategy
- **Always use CSS custom properties** for styling
- Pattern: `--sample-[component]-[property]`
- Provide fallback values: `var(--sample-button-bg, #007bff)`
- Support CSS parts for external styling

### 4. Registration & Exports
Update `src/index.ts` with:
```typescript
export { Sample[Name] } from './components/sample-[name]/index.js';
```

## üìö MANDATORY: Next.js Documentation Requirements

### 5. Next.js Markdoc Documentation
**MUST CREATE/UPDATE** `docs/pages/components/[name].md` with:

#### Required Front Matter:
```yaml
---
title: [Component Name]
description: [Brief component description for SEO]
---
```

#### Required Sections with Markdoc Tags:

##### Installation with Tabs:
```markdown
## üì¶ Installation

{% tabs defaultTab="0" %}
  {% tab title="NPM" icon="üì¶" %}
  ```bash
  npm install sample-design-system-educkf
  ```
  
  ```javascript
  import 'sample-design-system-educkf/components/sample-[name]';
  ```
  {% /tab %}
  
  {% tab title="Script Tag" icon="üéØ" %}
  ```html
  <script src="https://unpkg.com/sample-design-system-educkf/dist/components/sample-[name].js"></script>
  ```
  {% /tab %}
{% /tabs %}
```

##### Interactive Playground:
```markdown
## üéØ Basic Usage

{% playground 
   component="[name]" 
   title="Basic [Name] Example"
   description="Interactive [name] component with event handling"
   code="<sample-[name] variant=\"primary\">[Name] Content</sample-[name]>"
   height="200px" 
/%}
```

##### API Documentation Tables:
```markdown
## üé® Properties

{% apiTable 
   type="properties"
   data=[
     { property: "variant", type: "`'primary' | 'secondary'`", default: "`'primary'`", description: "Visual style variant" },
     { property: "size", type: "`'small' | 'medium' | 'large'`", default: "`'medium'`", description: "Component size" },
     { property: "disabled", type: "`boolean`", default: "`false`", description: "Disabled state" }
   ]
/%}

## üî• Events

{% apiTable 
   type="events"
   data=[
     { event: "sample-[name]-click", detail: "`{ target: HTMLElement }`", description: "Fired when component is clicked" },
     { event: "sample-[name]-change", detail: "`{ value: string }`", description: "Fired when component value changes" }
   ]
/%}

## üé® CSS Custom Properties

{% apiTable 
   type="css"
   data=[
     { property: "--sample-[name]-bg", default: "`var(--sample-primary-color, #007bff)`", description: "Background color" },
     { property: "--sample-[name]-color", default: "`var(--sample-text-color, white)`", description: "Text color" },
     { property: "--sample-[name]-border", default: "`1px solid transparent`", description: "Border styling" }
   ]
/%}

## üé® CSS Parts

{% apiTable 
   type="parts"
   data=[
     { part: "[name]", description: "Main component container" },
     { part: "[name]-content", description: "Content area" }
   ]
/%}
```

##### Framework Integration Examples:
```markdown
## üîß Framework Integration

{% tabs defaultTab="0" %}
  {% tab title="React" icon="‚öõÔ∏è" %}
  {% codeBlock language="jsx" title="React Example" %}
  import 'sample-design-system-educkf/components/sample-[name]';
  
  function App() {
    return (
      <sample-[name] 
        variant="primary"
        onSample-[name]-click={(e) => console.log('Clicked:', e.detail)}
      >
        React [Name]
      </sample-[name]>
    );
  }
  {% /codeBlock %}
  {% /tab %}
  
  {% tab title="Vue" icon="üíö" %}
  {% codeBlock language="vue" title="Vue Example" %}
  <template>
    <sample-[name] 
      variant="primary" 
      @sample-[name]-click="handleClick"
    >
      Vue [Name]
    </sample-[name]>
  </template>
  
  <script setup>
  import 'sample-design-system-educkf/components/sample-[name]';
  
  const handleClick = (event) => {
    console.log('Clicked:', event.detail);
  };
  </script>
  {% /codeBlock %}
  {% /tab %}
{% /tabs %}
```

##### Advanced Examples:
```markdown
## üñºÔ∏è Examples

### All Variants
{% playground 
   component="[name]" 
   title="All Variants"
   code="<sample-[name] variant=\"primary\">Primary</sample-[name]>
<sample-[name] variant=\"secondary\">Secondary</sample-[name]>
<sample-[name] variant=\"outline\">Outline</sample-[name]>"
   height="150px" 
/%}

### Custom Theming
{% playground 
   component="[name]" 
   title="Custom Theming"
   code="<sample-[name] class=\"custom-theme\">Custom Theme</sample-[name]>"
   css="
.custom-theme {
  --sample-[name]-bg: linear-gradient(45deg, #ff6b6b, #4ecdc4);
  --sample-[name]-color: white;
  --sample-[name]-border-radius: 20px;
}
"
   height="100px" 
/%}
```

##### Important Notes with Callouts:
```markdown
## üí° Best Practices

{% callout type="tip" title="Performance Tip" %}
Import individual components instead of the entire library for optimal bundle size.
{% /callout %}

{% callout type="warning" title="Framework Integration" %}
When using with React, make sure to handle events using the `onEvent-name` pattern for proper event binding.
{% /callout %}
```

### 6. Navigation Updates
**MUST UPDATE** these files:
- `docs/components/ComponentsSidebar.js` - Add component to navigation:
```javascript
const components = [
  // ... existing components
  { name: '[Name]', href: '/components/[name]', icon: 'üéØ' },
];
```

- `docs/pages/components/index.md` - Update component status table

### 7. MCP Server Integration
**MUST UPDATE** `docs/pages/api/mcp/[transport].js` - Add component data:
```javascript
const COMPONENTS = {
  // ... existing components
  '[name]': {
    name: '[Component Name]',
    description: '[Brief description for LLM usage]',
    usage: `<sample-[name] variant="primary">[Name] Content</sample-[name]>`,
    props: {
      'variant': 'String - "primary" | "secondary" - Visual style variant',
      'size': 'String - "small" | "medium" | "large" - Component size',
      'disabled': 'Boolean - Disables the component'
    },
    features: ['Feature 1', 'Feature 2', 'Feature 3'],
    examples: ['Use case 1', 'Use case 2', 'Use case 3']
  }
};
```

## üöÄ MANDATORY: Demo Requirements

### 8. Standalone Demo
**MUST CREATE/UPDATE** `demo/[name].html` with:

#### Required Features:
- Complete standalone demo (script tag usage)
- All variants, sizes, states demonstrations
- Interactive event testing
- Custom theming examples
- Performance information display
- Console output for events
- Comprehensive styling showcase
- Mobile-responsive design

### 9. Development Integration
**MUST UPDATE** `dev/index.html` with:

#### Required Updates:
- Add component examples to development server
- Include all variants, sizes, states
- Add event testing section
- Include performance monitoring
- Add interactive features
- Ensure responsive design

## üéØ Key Requirements

1. **Consistent API** - Component works identically in all usage patterns
2. **CSS Custom Properties** - All styling configurable via CSS variables
3. **Events** - Use CustomEvent for component communication
4. **TypeScript** - Full type safety with proper JSDoc
5. **Accessibility** - ARIA attributes and keyboard navigation
6. **Interactive Documentation** - Live playgrounds with real component instances
7. **MCP Server Integration** - Component data accessible to LLMs
8. **Framework Examples** - Working examples for React, Vue, Angular, Svelte

## ‚úÖ Definition of Done

### Component Implementation:
- [ ] Component works in dev server (bundled mode)
- [ ] Component works in demo server (standalone mode)  
- [ ] CSS theming works in both modes
- [ ] TypeScript definitions generated
- [ ] Proper JSDoc documentation
- [ ] Events properly dispatched
- [ ] Accessibility features implemented

### Next.js Documentation Requirements:
- [ ] **Markdoc documentation** created/updated in `docs/pages/components/[name].md`
- [ ] **Interactive playgrounds** with live component examples using `{% playground %}`
- [ ] **API documentation tables** complete using `{% apiTable %}` for properties, events, CSS variables, parts
- [ ] **Framework integration examples** for React, Vue, Angular, Svelte using `{% tabs %}`
- [ ] **Installation instructions** with NPM and script tag examples
- [ ] **Custom theming examples** with interactive playgrounds
- [ ] **Best practices callouts** using `{% callout %}` tags
- [ ] **Component navigation** updated in `docs/components/ComponentsSidebar.js`
- [ ] **Components index** updated in `docs/pages/components/index.md`

### MCP Server Integration:
- [ ] **Component data** added to MCP server API
- [ ] **LLM-friendly descriptions** and usage examples
- [ ] **Feature list** for component search functionality
- [ ] **Use cases** documented for discovery

### Demo Requirements:
- [ ] **Standalone demo** created/updated in `demo/[name].html`
- [ ] **Development demo** updated in `dev/index.html`
- [ ] **All variants/states** demonstrated
- [ ] **Interactive examples** with event handling
- [ ] **Theming showcase** with custom CSS properties
- [ ] **Performance metrics** displayed
- [ ] **Mobile responsive** design

### Build & Testing:
- [ ] **Build passes** for all formats (ES modules, UMD, individual)
- [ ] **Documentation site builds** without errors (`npm run build` in docs/)
- [ ] **Playground functionality** works in documentation
- [ ] **MCP server** returns component information correctly
- [ ] **No console errors** in either mode
- [ ] **Bundle sizes** documented and reasonable

## üö® CRITICAL: Never Ship Without

1. **Complete Next.js documentation** with interactive examples
2. **Working playgrounds** in documentation site
3. **MCP server integration** for LLM accessibility
4. **Updated component navigation** in sidebar
5. **Framework integration** examples tested
6. **Accessibility compliance** verified
7. **All demos functional** in both modes

**Remember**: Interactive documentation with live playgrounds and MCP server integration are NOT optional - they are required deliverables for every component!

